<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux命令]]></title>
    <url>%2F2018%2F06%2F17%2FLinux%2F01_Linux%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Nohup nohup.out的由来及作用 用途：LINUX命令用法，不挂断地运行命令。 语法：nohup Command [ Arg … ] [ &amp; ] 描述：nohup命令运行由Command参数和任何相关的Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用nohup命令运行后台中的程序。要运行后台中的nohup命令，添加&amp;到命令的尾部。 例子：nohup ./startWeblogic.sh &amp;意思是即使退出ssh界面，命令仍然在后台执行，并且打印过程日志到nohup.out,当然也可以将nohup.out的输出转向到其他文件，高级应用请参考扩展阅读。 nohup.out的查看方式与方法 nohup.out采用追加方式记录命令的输出结果，这会导致文件不断增大，若想搜索出错内容，一般会采用以下两种方式： linux本机查看： 使用tail 命令，查看最新的日志，或滚动监控日志打印。例如: tail -1000 nohup.out（查看最后1000行日志文本） tail -ｆ nohup.out（监控日志打印） ftp下载到主机查看（推荐vscode） nohup.out维护管理方法（清空nohup.out) 两个可以不用停止WEB服务就可以清空nohup.out的命令。 cp /dev/null nohup.out cat /dev/null &gt; nohup.out 扩展阅读 nohup的重定向，一劳永逸解决nohup.out文件过大的问题 1234# 只输出错误信息到日志文件lognohup ./program &gt;/dev/null 2&gt;log &amp;# 什么信息也不要nohup ./program &gt;/dev/null 2&gt;&amp;1 &amp; Linux的3种重定向 1230: 表示标准输入1: 标准输出,在一般使用时，默认的是标准输出2: 标准错误信息输出 /dev/null文件Linux下还有一个特殊的文件/dev/null，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。这一点非常有用，当我们不需要回显程序的所有信息时，就可以将输出重定向到/dev/null。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04科学上网]]></title>
    <url>%2F2018%2F06%2F16%2FUbuntu%2F04_Ubuntu%2016.04%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[本文假设读者已获得服务器相关信息（服务器ip地址、用户名、密码等）。若读者没有以上信息，可以到这里找人合租服务器，合租者会教你如何操作。当然，读者也可以按照这里的教程搭建属于自己的服务器。本文的服务器端系统为CentOS 7 x64，客户端系统为Ubuntu 16.04 x64，以下内容将重点介绍服务器端和客户端Shadowsocks的安装与配置，以方便大家科学上网。 服务器端安装1234567891011# 详见 https://www.vultrcn.com/6.html# 1. 连接服务器ssh user@hostname# 2. 安装Shadowsockswget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh &amp;&amp; bash shadowsocks-libev.sh# 3. 修改Shadowsocks配置信息（可选）# wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/shadowsocks-libev.sh &amp;&amp; bash shadowsocks-libev.sh modify# 4. 按提示安装成功后，手动保存shadowsocks信息（服务器ip、服务器端口、密码、加密方式），后续会用到 加速前面虽然已经搭建好了shadowsocks，但是因为服务器位于国外，连接速度会较慢，所以我们需要在服务器上安装TCP加速软件来提速。一般大家常用的TCP加速软件有锐速和 Google BBR 拥塞控制算法。注： 安装锐速需降级系统内核，而安装Google BBR则需升级系统内核，故两者不能同时安装。 安装加速软件需修改系统内核，有可能造成系统不稳定，故不建议将其应用在重要的生产环境中。 锐速的安装方法只支持CentOS6 x64及CentOS7 x64系统，不支持任何Debian &amp; Ubuntu系统（指服务器端，客户端不受影响） 原版和魔改版Google BBR在不同地区的服务器上会有不同效果，具体孰优孰劣请分别安装进行测试。二者不能同时安装。 锐速1234567891011121314151617# 详见 https://www.vultrcn.com/7.html# 判断系统类型uname -r# 输出结果分三种情况：# 1. 以2开头，CentOS6 x64系统# 2. 以3开头，CentOS7 x64系统# 3. 以4开头，服务器已经安装Google BBR拥塞控制算法，无需安装锐速# 二选一# CentOS6 x64锐速安装（选项按默认方式处理即可）wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install '2.6.32-642.el6.x86_64'# CentOS7 x64锐速安装（选项按默认方式处理即可）# 1. 更新内核并重启服务器wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh# 2. 安装锐速yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install Google BBR12345678910111213141516# 详见 https://www.vultrcn.com/5.html# 原版wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh# 魔改版# 1. 升级内核并重启# CentOS 6/7 x64 系统wget --no-check-certificate https://raw.githubusercontent.com/nanqinlang-tcp/tcp_nanqinlang/master/General/CentOS/bash/tcp_nanqinlang-1.3.2.sh &amp;&amp; bash tcp_nanqinlang-1.3.2.sh# Debian 7/8 x64 系统wget --no-check-certificate https://github.com/nanqinlang-tcp/tcp_nanqinlang/releases/download/3.4.2.1/tcp_nanqinlang-fool-1.3.0.sh &amp;&amp; bash tcp_nanqinlang-fool-1.3.0.sh# 2. 安装魔改Google BBR# CentOS 6/7 x64 系统bash tcp_nanqinlang-1.3.2.sh# Debian 7/8 x64 系统bash tcp_nanqinlang-fool-1.3.0.sh 客户端 安装 1sudo apt install python-pip python-setuptools shadowsocks 新建配置文件 12mkdir -p ~/programs/shadowsocks/touch ~/programs/shadowsocks/config.json 写入配置信息 123456789&#123; "server": "服务器ip地址", "server_port": "服务器端口号", "local_address": "127.0.0.1", "local_port": 1080, "password": "服务器密码", "timeout": 300, "method": "加密方法"&#125; 修改配置文件”/etc/polipo/config”(先备份，后修改)，并重启Polipo 123456789101112131415161718# This file only needs to list configuration variables that deviate# from the default values. See /usr/share/doc/polipo/examples/config.sample# and &quot;polipo -v&quot; for variables you can tweak and further information.logSyslog = falselogFile = &quot;/var/log/polipo/polipo.log&quot;socksParentProxy = &quot;127.0.0.1:1080&quot;socksProxyType = socks5chunkHighMark = 50331648objectHighMark = 16384serverMaxSlots = 64serverSlots = 16serverSlots1 = 32proxyAddress = &quot;0.0.0.0&quot;proxyPort = 8123 123# Shadowsocks默认采用Socks5协议，这里基于Polipo将其转换成HTTP代理，加强通用性。sudo apt-get install polipo/etc/init.d/polipo restart 修改系统代理 “All Settings -&gt; Network -&gt; Network proxy”，设置为手动方法，ip全部设为”127.0.0.1”，端口号设为”8123”（同”/etc/polipo/config”中的”proxyPort”值） 启动Shadowsocks，开启你的新世界 1sslocal -c ~/programs/shadowsocks/config.json 添加启动项，填入相关内容 1sudo gedit /usr/share/applications/shadowsocks.desktop 1234567[Desktop Entry]Type=ApplicationName=ShadowSocksIcon=/home/username/programs/shadowsocks/icon.pngExec=nohup bash -c &quot;sslocal -c /home/username/programs/shadowsocks/config.json&quot; &gt; /dev/null 2&gt;&amp;1 &amp; exitTerminal=falseStartupNotify=true 注： 按照自己的情况配置启动项文件中的路径 启动项中的图标本身不存在，需要另外下载 浏览器配置（先将系统代理设置为None） 将系统代理设置为None，后续会配置Chrome浏览器使其自动切换代理模式（直连或使用代理） 给chrome安装SwitchyOmega插件，下载地址在这里 切换到SwitchyOmega配置页面，在左侧点击”New Profile…”新建Profile文件 配置代理服务器的ip地址和端口号（此处端口号为1080） 在”auto switch”页面中添加”Rule List”并配置”Switch rules”，图中Rule List URL为 1https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 在浏览器右上角点击SwitchyOmega图标，选择自动切换，然后打开google.com试试 参考 Vultr吧 Vultr注册 Linux下使用shadowsocks Ubuntu使用shadowsocks]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows7 x64离线安装keras和theano]]></title>
    <url>%2F2018%2F05%2F15%2FDL%2F01_Windows7%20x64%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85keras%E5%92%8Ctheano%2F</url>
    <content type="text"><![CDATA[工具 visual studio 2015 cuda_9.0.176_windows cudnn-9.0-windows7-x64-v7.1 pycharm-community-2018.1.1 Miniconda3-latest-Windows-x86_64 391.35-desktop-win8-win7-64bit-international-whql 注: 显卡驱动需要根据显卡型号去NVIDIA官网下载 相关环境 编译环境 安装visual studio 2015 驱动及CUDA环境 安装391.35-desktop-win8-win7-64bit-international-whql 安装cuda_9.0.176_windows，默认会安装到C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\ 解压cudnn-9.0-windows7-x64-v7.1，将解压的三个文件夹(bin，include，lib)拷贝到CUDA的安装路径下(该路径下存在同名文件夹，合并即可) Python环境 安装pycharm-community-2018.1.1 安装Miniconda3-latest-Windows-x86_64(安装路径中不要有空格) 虚拟环境配置 镜像配置 anaconda mirror 12345conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/conda config --set show_channel_urls yes pypi mirror 配置文件路径 Linux: ~/.config/pip/pip.conf Windows: %APPDATA%\pip\pip.ini Mac: $HOME/Library/Application Support/pip/pip.conf 在配置文件中添加内容 12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 注: 镜像配置主要解决国内下载相关包速度慢的问题 除了清华镜像源，还有阿里云镜像源、上交镜像源等 用户环境变量配置 12345CONDA_PATH=D:\Miniconda3;D:\Miniconda3\Scripts;D:\Miniconda3\MinGW\bin;D:\Miniconda3\MinGW\x86_64-w64-mingw32;VS2015_PATH=D:\Program Files\Microsoft Visual Studio 14.0\VC\bin;D:\Program Files\Microsoft Visual Studio 14.0\VC\bin\amd64;PATH=%CONDA_PATH%;%VS2015_PATH%; 注: 环境变量配置需要根据个人安装相关软件的具体情况而定 D:\Miniconda3\MinGW文件夹本身不存在，需由下文的conda install mingw命令生成 在线环境搭建 theano 123456conda insatll mingwconda create -n theano python=3.5activate theanoconda install numpy scipy mkl-service libpython m2w64-toolchainconda install theano pygpu keras 1234567conda create -n tensorflow python=3.5activate tensorflowpython -m pip install -U pippip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple/ -U tensorflow-gpupip3 install h5py graphviz pydotpip3 install keras 注: 可以在https://mirrors.tuna.tsinghua.edu.cn/help/tensorflow/中查找特定版本的tensorflow 离线环境搭建方法 方法一: 在线搭建好虚拟环境，将安装好的虚拟环境文件夹(如D:\Miniconda3\envs\tensorflow)拷贝到离线机的对应文件夹中 方法二: 在联网机上获取离线安装包，拷贝到离线环境中进行安装 注: 方法一需要联网机和离线机的配置及相关环境类似 方法二中的离线安装包可以通过下文方法快速获得 离线安装包的获取 通过conda命令安装的包放在D:\Miniconda3\pkgs中，在线安装时可以手动保存安装的包到其他目录下 通过pip命令安装的包可以通过命令获得 12pip freeze &gt; requirements.txtpip download -d C:\Users\Admin\Desktop\packages -r requirements.txt 执行上述命令后，在线环境中通过pip命令安装的包会下载到C:\Users\Admin\Desktop\packages中 注: 通过pip获取在虚拟环境中安装的包时，需要先激活该环境(如activate tensorflow) 可以通过pip freeze --help命令查看其相关用法 离线安装包的安装 conda下载的包可以用以下命令安装 1conda install --offline C:\Users\Admin\Desktop\packages\numpy-1.12.1-py36_0.tar.bz2 pip下载的包可以用以下命令安装 1pip install --no-index --find-links=C:\Users\Admin\Desktop\packages -r requirements.txt 注: 可以写脚本生成conda离线安装命令 12345678import ospackage_path = "packages/"with open("install.bat","w") as f: files = [os.path.join(package_path，filename) for filename in sorted(list(os.listdir(package_path))) if os.path.isfile(os.path.join(package_path，filename)) and filename.endswith('.tar.bz2')] for filepath in files: print("conda install --offline ",filepath,file=f)]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Keras</tag>
        <tag>Theano</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2F2017%2F10%2F04%2FOther%2F01_Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本文主要介绍Hexo搭建个人博客过程。内容主要包括Hexo环境搭建、相关配置、主题配置、七牛图床的使用及Mathjax转义问题等。 安装12345678910111213141516171819# 详见 https://hexo.io/docs/index.html# Gitsudo apt-get install git git-core# Node.js# 详见https://github.com/creationix/nvm，具体版本（如v0.33.1）可能会变wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bashsource ~/.bashrcnvm install stable# Hexo# Installationnpm install -g hexo-cli# Initializationhexo init &lt;folder&gt; # &lt;folder&gt;为本地目录cd &lt;folder&gt;npm install 配置Git12345# 1. 在github上创建名为`username.github.io`的repository，`username`为github用户名# 2. 配置git信息git config --global user.name "username"git config --global user.email "username@example.com"git config -l # 查看配置 SSH keys123456789101112# 详见 https://help.github.com/articles/connecting-to-github-with-ssh/# 1. 生成SSH keyscd ~/.sshssh-keygen -t rsa -C "username@example.com" # 注意替换为自己的邮箱# 提示输入密码和文件名时可以直接回车，密码用于项目提交## 2. 新建SSH keys# 在 https://github.com/settings/keys 中添加SSH keys# Title可设为博客名，Key值为`~/.ssh/id_rsa.pub`文件中的内容## 3. 测试SSH keys配置ssh -T git@github.com Hexo12345678910# 详见 https://hexo.io/docs/configuration.html# 完整配置见`_config.yml`文件language: zh-cnurl: https://username.github.io/theme: next# 此处配合SSH keys可以做到Hexo免密码部署deploy: type: git repository: git@github.com:username/username.github.io.git branch: master Theme123456789# 详见 https://hexo.io/themes/## 推荐 [NexT](https://github.com/iissnan/hexo-theme-next) [Maupassant](https://github.com/tufu9441/maupassant-hexo) [Jacman](https://github.com/wuchong/jacman) [indigo](https://github.com/yscoder/hexo-theme-indigo)## 本文采用NexT主题，使用说明见[Next](http://theme-next.iissnan.com/) Qiniu12345# 1. [快速入门](https://developer.qiniu.com/kodo/manual/1233/console-quickstart)## 2. [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)## 注： AccessKey/SecretKey在 https://portal.qiniu.com/user/key Mathjax问题： _的转义，在markdown中，_是斜体，但是在latex中，却有下标的意思，就会出现问题。 \\的换行，在markdown中，\\会被转义为\，这样也会影响影响mathjax对公式中的\\进行渲染。 方法： 修改nodes_modules/marked/lib/marked.js 123456789// 将escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,// 改为escape: /^\\([`*&#123;&#125;\[\]()# +\-.!_&gt;])/,//// 将em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,// 改为em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 参考 Hexo Next Qiniu Mathjax]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04软件安装]]></title>
    <url>%2F2017%2F10%2F03%2FUbuntu%2F03_Ubuntu%2016.04%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[本文主要介绍Ubuntu 16.04下英伟达显卡驱动、CUDA 8.0、cuDNN 5.1、VirtualEnv、OpenCV 3.1.0、Genymotion、XMind 8等的安装方法。 1234su root# 根据需求自行修改export PROGRAMS_HOME=/home/programsexport ENV_PROFILE_PATH=/etc/bash.bashrc NVIDIA Driver123456789101112131415161718192021222324# 删除旧驱动apt-get purge nvidia-*# 禁用自带的nouveau nvidia驱动echo "blacklist nouveau" &gt;&gt; /etc/modprobe.d/blacklist-nouveau.confecho "options nouveau modeset=0" &gt;&gt; /etc/modprobe.d/blacklist-nouveau.confupdate-initramfs -u# 重启系统并进入文本模式(Ctrl + Alt + F1)reboot# 检查nouveau是否存在lsmod | grep nouveau# 查看显卡型号,根据显卡型号(如GT 1080)去官网下载相应驱动lspci -v | grep VGA# 关闭X-Windows服务service lightdm stop# 多显卡时可能需要加--no-opengl-files参数，解决用户卡在登录界面循环登录问题bash NVIDIA-Linux-x86_64-375.66.run# 重启X-Windows服务，进入图形界面(Ctrl + Alt + F7)service lightdm start# 查看nvidia显卡驱动nvidia-sminvidia-settings CUDA 8.0 &amp; cuDNN 5.1123456789101112131415161718192021222324252627# http://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#runfile# 关闭X-Windows服务service lightdm stop# [CUDA Toolkit](https://developer.nvidia.com/cuda-downloads)# "Install NVIDIA Accelerated Graphics Driver for ..."在使用多显卡时可能需要选择"no"bash cuda_8.0.61_375.26_linux.run# 环境变量echo -e "\n# cuda-8.0" &gt;&gt; $ENV_PROFILE_PATHecho "export PATH=/usr/local/cuda-8.0/bin\$&#123;PATH:+:\$&#123;PATH&#125;&#125;" &gt;&gt; $ENV_PROFILE_PATHecho "export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64\$&#123;LD_LIBRARY_PATH:+:\$&#123;LD_LIBRARY_PATH&#125;&#125;" &gt;&gt; $ENV_PROFILE_PATHsource $ENV_PROFILE_PATH# 重启系统，安装示例程序(也可以在安装cuda时选择)# cuda-install-samples-8.0.sh $PROGRAMS_HOME# 编译运行示例程序(可以部分编译)cd $PROGRAMS_HOME/NVIDIA_CUDA-8.0_Samples/make -j $(nproc)cd bin/x86_64/linux/release/./deviceQuery# cuDNN 5.1安装tar xvzf cudnn-8.0-linux-x64-v5.1.tgzcd cudacp include/cudnn.h /usr/local/cuda-8.0/include/cp lib64/* /usr/local/cuda-8.0/lib64/ VirtualEnv1234567891011121314151617181920212223242526272829# 安装apt-get updateapt-get upgradeapt-get install -y python-pip python3-pip# pip3安装virtualenvwrapperpip3 install virtualenv virtualenvwrapper# 环境变量echo -e "\n# virtualenv and virtualenvwrapper" &gt;&gt; $ENV_PROFILE_PATHecho "export PIP_RESPECT_VIRTUALENV=true" &gt;&gt; $ENV_PROFILE_PATH# 指定python具体版本echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3" &gt;&gt; $ENV_PROFILE_PATHecho "export WORKON_HOME=$PROGRAMS_HOME/.virtualenvs" &gt;&gt; $ENV_PROFILE_PATHecho "source /usr/local/bin/virtualenvwrapper.sh" &gt;&gt; $ENV_PROFILE_PATHsource $ENV_PROFILE_PATHchmod 777 -R $WORKON_HOME# 创建名为py3的虚拟环境, python interpreter为python3mkvirtualenv py3 -p python3# 切换虚拟环境为py3workon py3# 退出虚拟环境deactivate# 列出所有虚拟环境workon# 删除虚拟环境rmvirtualenv py3 OpenCV 3.1.01234567891011121314151617181920212223242526# http://docs.opencv.org/3.2.0/d7/d9f/tutorial_linux_install.htmlapt-get updateapt-get upgradeapt-get install -y git cmake pkg-config build-essentialapt-get install -y libopencv-dev libgtk-3-dev python-dev python3-devapt-get install -y libjpeg8-dev libtiff5-dev libjasper-dev libpng12-devcd $PROGRAMS_HOMEgit clone https://github.com/opencv/opencv.gitmkdir -p $PROGRAMS_HOME/opencv/build/cd $PROGRAMS_HOME/opencv/build/# 虚拟环境中编译安装workon py3_keras_tfcmake -D CMAKE_BUILD_TYPE=RELEASE \-D CMAKE_INSTALL_PREFIX=$VIRTUAL_ENV \-D PYTHON3_EXECUTABLE=$VIRTUAL_ENV/bin/python3 \-D PYTHON_DEFAULT_EXECUTABLE=$VIRTUAL_ENV/bin/python3 \-D PYTHON3_PACKAGES_PATH=$VIRTUAL_ENV/lib/python3.5/site-packages \-D PYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.5m.so \-D PYTHON3_INCLUDE_DIRS=$VIRTUAL_ENV/include/python3.5m \-D BUILD_opencv_python3=ON ..make -j $(nproc)make install Genymotion123456789101112131415# 安装gdebi virtualbox-5.1_5.1.14-112924-Ubuntu-xenial_amd64.debchmod +x genymotion-2.8.1_x64.bin./genymotion-2.8.1_x64.bin -d $PROGRAMS_HOMEexport GENYMOTION_DESKTOP_PATH=/usr/share/applications/genymotion.desktop# 添加启动项echo "[Desktop Entry]" &gt;&gt; $GENYMOTION_DESKTOP_PATHecho "Name=Genymotion" &gt;&gt; $GENYMOTION_DESKTOP_PATHecho "Exec=$PROGRAMS_HOME/genymotion/genymotion" &gt;&gt; $GENYMOTION_DESKTOP_PATHecho "Icon=$PROGRAMS_HOME/genymotion/icons/icon.png" &gt;&gt; $GENYMOTION_DESKTOP_PATHecho "Type=Application" &gt;&gt; $GENYMOTION_DESKTOP_PATHecho "StartupNotify=true" &gt;&gt; $GENYMOTION_DESKTOP_PATHecho "Categories=GNOME;GTK;" &gt;&gt; $GENYMOTION_DESKTOP_PATH XMind 812345678910111213141516171819202122# XMind安装包 http://www.xmind.net/download/linux/unzip xmind-8-linux.zip -d $PROGRAMS_HOME/xmind/chown -R $USER:$USER $PROGRAMS_HOME/xmindcd $PROGRAMS_HOME/xmind/bash setup.sh# 环境变量echo "export PATH=$PROGRAMS_HOME/xmind/XMind_amd64:\$PATH" &gt;&gt; $ENV_PROFILE_PATHsource $ENV_PROFILE_PATHcp $PROGRAMS_HOME/xmind/XMind_amd64/XMind.ini $PROGRAMS_HOME/xmind/XMind_amd64/XMind.ini.bak# 修改配置文件$PROGRAMS_HOME/xmind/XMind_amd64/XMind.ini# 将"./"替换为"$PROGRAMS_HOME/xmind/XMind_amd64/"# 将"../"替换为"$PROGRAMS_HOME/xmind/"export XMIND_DESKTOP_PATH=/usr/share/applications/xmind.desktop# 启动项echo "[Desktop Entry]" &gt;&gt; $XMIND_DESKTOP_PATHecho "Name=XMind" &gt;&gt; $XMIND_DESKTOP_PATHecho "Exec=$PROGRAMS_HOME/xmind/XMind_amd64/XMind" &gt;&gt; $XMIND_DESKTOP_PATHecho "Type=Application" &gt;&gt; $XMIND_DESKTOP_PATHecho "StartupNotify=true" &gt;&gt; $XMIND_DESKTOP_PATHecho "Categories=GNOME;GTK;" &gt;&gt; $XMIND_DESKTOP_PATH]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04常见问题]]></title>
    <url>%2F2017%2F10%2F02%2FUbuntu%2F02_Ubuntu%2016.04%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[本文主要介绍Ubuntu 16.04下常见问题的解决方法。文中提及的问题包括: 更换网卡驱动、修改网卡名称、同步双系统时间、shell终端以窗口形式打开文件夹、禁用系统奔溃报告、重启Unity、E: Sub-process /usr/bin/dpkg returned an error code (1)、静态ip地址、dns &amp; gateway、搜狗无法输入中文、护眼工具redshift无法定位、有道词典安装。 系统更换网卡驱动12345678910111213# 查看网卡,(eth0,有线;wlan0,无线;lo,本地)ifconfig -a# 查看网卡信息ethtool -i eth0# 查看网卡型号和生产厂商信息lspci | grep netlspci -v# 根据网卡型号(如RTL8111/8168/8411)去官网下载驱动包，解压运行tar jxvf 0007-r8168-8.043.02.tar.bz2cd r8168-8.043.02/sudo makesudo bash autorun.sh# 按需重启 修改网卡名称为eth012sudo sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"/' /etc/default/grubsudo update-grub 双系统时间不同步1sudo timedatectl set-local-rtc true shell终端中以窗口形式打开文件夹1234sudo bash -c 'echo -e "\nalias opendir=\"nautilus\"" &gt;&gt; /etc/bash.bashrc'source /etc/bash.bashrc# 测试opendir命令opendir /home/ 禁用系统崩溃报告123sudo sed -i 's/enabled=1/enabled=0/' /etc/default/apport# 关闭apport服务sudo service apport stop 重置Unity1234sudo apt-get install -y dconf-toolssudo dconf reset -f /org/compiz/sudo setsid unitysudo unity --reset-icons E: Sub-process /usr/bin/dpkg returned an error code (1)123456sudo mv /var/lib/dpkg/info /var/lib/dpkg/info.baksudo mkdir /var/lib/dpkg/infosudo apt-get updatesudo apt-get -f installsudo rm -rf /var/lib/dpkg/infosudo mv /var/lib/dpkg/info.bak /var/lib/dpkg/info 静态ip地址1234567891011su rootexport NETWORK_PROFILE_PATH=/etc/network/interfacesecho "auto eth0" &gt;&gt; $NETWORK_PROFILE_PATHecho "iface eth0 inet static" &gt;&gt; $NETWORK_PROFILE_PATHecho "address 10.103.244.160" &gt;&gt; $NETWORK_PROFILE_PATHecho "gateway 10.103.240.1" &gt;&gt; $NETWORK_PROFILE_PATHecho "netmask 255.255.240.0" &gt;&gt; $NETWORK_PROFILE_PATHecho "network 10.103.240.0" &gt;&gt; $NETWORK_PROFILE_PATHecho "broadcast 10.103.255.255" &gt;&gt; $NETWORK_PROFILE_PATH# 重启网卡/etc/init.d/networking restart dns &amp; gateway1234567# 查看网关ip route show # route -n or netstat -rn# 查看dns服务cat /etc/resolv.conf# 配置dns服务器sudo bash -c 'echo "nameserver 223.5.5.5" &gt;&gt; /etc/resolv.conf'sudo bash -c 'echo "nameserver 114.114.114.114" &gt;&gt; /etc/resolv.conf' boot分区不足12345678910# 详见 https://blog.csdn.net/qq_27818541/article/details/72675954# 查看系统已经安装的内核版本dpkg –get-selections |grep linux-image# 查看系统当前使用的内核版本uname -r# 删除旧的内核版本# 1. install 说明：系统已经安装了相应的内核，使用purge命令删除相应的内核sudo apt purge linux-image-4.4.0-66-generic# 2. deinstall 说明：系统没有安装此内核，但是在配置文件中还残留它的信息（有可能是以前卸载的时候不彻底）sudo dpkg -P linux-image-extra-4.4.0-31-generic 软件搜狗无法输入中文12345# 用户身份执行su usernamerm -rf ~/.config/SogouPYrm -rf ~/.config/SogouPY.usersrm -rf ~/.config/sogou-qimpanel 护眼工具redshift无法定位1234567sudo apt-get install -y redshift gtk-redshiftecho "[redshift]" &gt;&gt; ~/.config/redshift.configecho -e "location-provider=manual\n" &gt;&gt; ~/.config/redshiftecho "[manual]" &gt;&gt; ~/.config/redshiftecho "lat=39.92" &gt;&gt; ~/.config/redshiftecho "lon=116.46" &gt;&gt; ~/.config/redshift 有道词典安装12345678910# 下载: youdao-dict_1.1.0-0-ubuntu_amd64.deb# 1) 解压deb包dpkg -X ./youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao# 2) 解压deb包中的control信息dpkg -e ./youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao/DEBIAN# 3) 编辑youdao/DEBIAN/control文件，删除Depends里面的gstreamer0.10-plugins-ugly# 4) 重新打包dpkg-deb -b youdao youdaobuild.debsudo gdebi youdaobuild.deb# 不显示迷你窗口是因为QML和N卡闭源驱动冲突]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04安装及配置]]></title>
    <url>%2F2017%2F10%2F01%2FUbuntu%2F01_Ubuntu%2016.04%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[本文主要介绍Ubuntu 16.04系统的U盘启动盘制作、系统安装、系统个性化设置、常用软件安装及不常用软件清理等过程。 安装工具 UltraISO EasyBCD FixMbr Ubuntu镜像(.iso) U盘启动盘制作 启动UltraISO，”文件”-&gt; “打开”，找到Ubuntu镜像，打开 “启动”-&gt;”写入硬盘镜像” “写入方式”选择”USB-HDD+” “便捷启动”-&gt;”写入新的驱动器引导扇区”-&gt;”Syslinux” 点击”写入”，等待写入完成 磁盘分配 右键: “计算机”-&gt;”管理”-&gt;”硬盘管理” 选择某分区，右键”删除卷”，得到空闲空间(free space) 注: “删除卷”内的数据会丢失 步骤 插上U盘启动盘 重启Windows 7 设置BIOS，从U盘启动(自行百度) 联网设置: 非联网(建议,拔出网线) 第三方软件: 安装(建议) 安装类型: 其他选项 分区(点击”空闲空间(free space)”，”+”用于分配) 选择时区、键盘布局；设置用户名、计算机名、密码等 重启 用途 大小 类型 /boot 250M(建议) 逻辑分区 swap 内存1-2倍 逻辑分区 / &gt;= 50G(按需分配) 主分区 home 剩余空间 逻辑分区 修改系统引导项(选做) 进入Windows 7，启动EasyBCD “添加新条目”-&gt;”Linux/BSD” “类型”选择”GRUB 2”，驱动器选择/boot分区对应的驱动器，添加条目 “编辑引导菜单”，调整顺序及等待时间 下载FixMbr.exe放至系统盘(Win7)根目录下，管理员身份运行cmd，命令行输入 123# 切换至系统盘根目录cd /d C:mbrfix /drive 0 fixmbr /yes 重启电脑 配置个性化1234567891011121314151617# 移动Unity启动器到底端gsettings set com.canonical.Unity.Launcher launcher-position Bottom# 移动Unity启动器到左侧# gsettings set com.canonical.Unity.Launcher launcher-position Left# 点击图标最小化gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true# 设置窗口菜单# Appearance-&gt;Behavior-&gt;Show the menus for a window-&gt;In the window's title bar# Appearance-&gt;Behavior-&gt;Menus visibility-&gt;Always displayed# 交互式搜索gsettings set org.gnome.nautilus.preferences enable-interactive-search true# 在面板上显示用户名# gsettings set com.canonical.indicator.session show-real-name-on-panel true 安装常用软件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667sudo apt-get updatesudo apt-get upgrade -y# gitsudo apt-get install -y git# vimsudo apt-get install -y vim# 内存查看工具sudo apt-get install -y htop# 桌面配置工具sudo apt-get install -y unity-tweak-tool# 安装经典菜单指示器sudo add-apt-repository -y ppa:diesch/testingsudo apt-get updatesudo apt-get install -y classicmenu-indicator# 安装系统指示器SysPeeksudo add-apt-repository -y ppa:nilarimogard/webupd8sudo apt-get updatesudo apt-get install -y syspeek# Atom编辑器sudo add-apt-repository -y ppa:webupd8team/atomsudo apt-get updatesudo apt-get install -y atom# 安装Chromesudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" &gt;&gt; /etc/apt/sources.list.d/google-chrome.list'sudo wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -sudo apt-get updatesudo apt-get install -y google-chrome-stable# 多线程下载工具sudo apt-get install -y axel# 防火墙sudo apt-get install -y gufw# 解压缩工具sudo apt-get install -y unrar unzip# 系统清理工具sudo apt-get install -y bleachbit# 护眼工具sudo apt-get install -y redshift gtk-redshift# flash插件sudo apt-get install -y flashplugin-installer# 开机开启小键盘sudo apt-get install -y numlockxsudo bash -c 'echo "greeter-setup-script=/usr/bin/numlockx on" &gt;&gt; /usr/share/lightdm/lightdm.conf.d/50-unity-greeter.conf'# 截图工具sudo add-apt-repository -y ppa:shutter/ppasudo apt-get updatesudo apt-get install -y shutter# SMPlayersudo apt-add-repository -y ppa:rvm/smplayersudo apt-get updatesudo apt-get install -y smplayer smplayer-skins smplayer-themes 1234567891011121314151617181920212223# gdebisudo apt-get install -y gdebi gdebi-core# office办公工具# 下载deb包 http://linux.wps.cn/# Alpha版 wps-office_10.1.0.5672~a21_amd64.debsudo gdebi -n wps-office*.deb# 搜狗输入法# 下载deb包 http://pinyin.sogou.com/linux/?r=pinyin# sogoupinyin_2.1.0.0086_amd64.deb# 安装后重启系统，并通过Fcitx Configuration添加搜狗拼音输入法sudo gdebi -n sogoupinyin*.deb# 网易云音乐# 下载deb包 http://music.163.com/#/download# netease-cloud-music_1.0.0-2_amd64_ubuntu16.04.debsudo gdebi -n netease-cloud-music*.deb# 翻墙软件lantern# 下载deb包 https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-64-bit.deb# lantern-installer-64-bit.deb# sudo gdebi -n lantern*.deb 删除自带软件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# office工具sudo apt-get remove -y libreoffice-common# 邮件工具sudo apt-get remove -y thunderbird# 多媒体播放器sudo apt-get remove -y totem# 音乐播放器sudo apt-get remove -y rhythmbox# 即时通信软件sudo apt-get remove -y empathy# 光盘刻录工具sudo apt-get remove -y brasero# 扫描工具sudo apt-get remove -y simple-scan# 游戏sudo apt-get remove -y cheesesudo apt-get remove -y gnome-mahjonggsudo apt-get remove -y aisleriotsudo apt-get remove -y gnome-minessudo apt-get remove -y gnome-sudoku# 备份工具sudo apt-get remove -y deja-dup# amazon工具sudo apt-get remove -y unity-webapps-common# BT下载工具sudo apt-get remove -y transmission-common# 屏幕阅读器sudo apt-get remove -y gnome-orca# 浏览器sudo apt-get remove -y webbrowser-app# 远程控制软件sudo apt-get remove -y landscape-client-ui-install# 屏幕键盘sudo apt-get remove -y onboard]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
</search>
